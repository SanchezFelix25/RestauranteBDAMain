/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package itson.sistemarestaurantepresentacion;

import itson.sistemarestaurantedominio.ClienteFrecuente;
import itson.sistemarestaurantenegocio.IClientesFrecuentesBO;
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.List;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author rauln
 */
public class BuscadorClientesFrecuentesPanel extends javax.swing.JPanel {

    private IClientesFrecuentesBO clientesFrecuentesBO;
    private ClientesFiltradosListener listener;
    private static final String DEFAULT_BUSCADOR = "INGRESE EL CLIENTE QUE DESEA BUSCAR . . .";

    public BuscadorClientesFrecuentesPanel() {
        initComponents();
        configurarPlaceholders();
        configurarBusquedaEnTiempoReal();

    }


    public void setClientesFrecuentesBO(IClientesFrecuentesBO clientesFrecuentesBO) {
        this.clientesFrecuentesBO = clientesFrecuentesBO;
    }

    private void configurarPlaceholder(javax.swing.JTextField textField, String placeholderText) {
        // Establecer el texto y color inicial
        textField.setText(placeholderText);
        textField.setForeground(Color.GRAY);

        // Agregar FocusListener para manejar el comportamiento del placeholder
        textField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                // Cuando el campo obtiene el foco
                if (textField.getText().equals(placeholderText)) {
                    textField.setText("");
                    textField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                // Cuando el campo pierde el foco
                if (textField.getText().isEmpty()) {
                    textField.setText(placeholderText);
                    textField.setForeground(Color.GRAY);
                }
            }
        });
    }

    // Método para configurar los placeholders en todos los campos
    private void configurarPlaceholders() {
        configurarPlaceholder(textFieldBuscador, DEFAULT_BUSCADOR);
    }

    private void configurarBusquedaEnTiempoReal() {
        textFieldBuscador.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarBusqueda();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarBusqueda();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarBusqueda();
            }
        });
    }

    private void actualizarBusqueda() {
        // Verificar si el texto es igual al placeholder o si el BO no está configurado
        if (textFieldBuscador.getText().equals(DEFAULT_BUSCADOR)
                || clientesFrecuentesBO == null) {
            return; // No buscar si es texto placeholder o no hay BO configurado
        }

        String filtro = textFieldBuscador.getText().trim();

        try {
            List<ClienteFrecuente> resultados = clientesFrecuentesBO.buscarClientes(filtro);

            // Notificar al frame o panel donde se usa este buscador
            if (listener != null) {
                listener.onClientesFiltrados(resultados);
            }
        } catch (Exception ex) {
            System.err.println("Error al buscar clientes: " + ex.getMessage());
        }
    }

    // Método para establecer el listener
    public void setClientesFiltradosListener(ClientesFiltradosListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldBuscador = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        textFieldBuscador.setFont(new java.awt.Font("Montserrat Medium", 1, 12)); // NOI18N
        textFieldBuscador.setForeground(new java.awt.Color(204, 204, 204));
        textFieldBuscador.setText("INGRESE EL CLIENTE QUE DESEA BUSCAR . . .");
        textFieldBuscador.setBorder(null);
        textFieldBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldBuscadorActionPerformed(evt);
            }
        });
        add(textFieldBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 10, 400, 20));
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 30, 400, 5));
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldBuscadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldBuscadorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField textFieldBuscador;
    // End of variables declaration//GEN-END:variables


}
